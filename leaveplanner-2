import React, { useState } from "react";

export default function App() {
  const [toggletable, settoggletable] = useState(true);
  function toggletablefunc() {
    settoggletable((p) => !p);
    console.log(toggletable);
  }

  let months1half = [31, 28, 31, 30, 31, 30];

  let months2half = [31, 31, 30, 31, 30, 31];

  let obj = [
    {
      name: "karan",
      leaves: [
        {
          start: new Date(2025, 0, 5),
          end: new Date(2025, 1, 20),
        },
        {
          start: new Date(2025, 2, 9),
          end: new Date(2025, 3, 16),
        },

        {
          start: new Date(2025, 6, 9),
          end: new Date(2025, 7, 16),
        },
      ],
    },

    {
      name: "shanthanu",
      leaves: [
        {
          start: new Date(2025, 9, 5),
          end: new Date(2025, 10, 20),
        },
        {
          start: new Date(2025, 4, 9),
          end: new Date(2025, 4, 16),
        },
      ],
    },

    {
      name: "karthi",
      leaves: [
        {
          start: new Date(2025, 8, 5),
          end: new Date(2025, 8, 20),
        },
        {
          start: new Date(2025, 6, 9),
          end: new Date(2025, 6, 16),
        },
      ],
    },

    {
      name: "mani",
      leaves: [
        {
          start: new Date(2025, 5, 15),
          end: new Date(2025, 7, 20),
        },
        {
          start: new Date(2025, 2, 9),
          end: new Date(2025, 3, 16),
        },
      ],
    },
    {
      name: "sanjay",
      leaves: [
        {
          start: new Date(2025, 2, 10),
          end: new Date(2025, 1, 20),
        },
        {
          start: new Date(2025, 2, 8),
          end: new Date(2025, 2, 16),
        },
      ],
    },
  ];

  let [toggle, settoglle] = useState(false);

  function helperfunc(leavesarry, month, date) {
    let newdate = new Date(2025, month, date);

    return leavesarry.some((i) => {
      if (newdate >= i.start && newdate <= i.end) {
        return true;
      }
    });
  }

  function func1(leavesarry, month, date) {
    let newdate = new Date(2025, month, date);

    leavesarry.some((i) => {
      if (newdate >= i.start && newdate <= i.end) {
        // alert(
        //   "start=" +
        //     i.start.toLocaleDateString("en-GB", {
        //       year: "numeric",
        //       month: "short",
        //       day: "numeric",
        //     }) +
        //     " end date=" +
        //     i.end.toLocaleDateString("en-GB", {
        //       year: "numeric",
        //       month: "short",
        //       day: "numeric",
        //     })
        // );
      }
    });
  }
  return (
    <div className="leaveplannercontainer">
      <div className="container leaveplanner">
        <div className="row leaveplannerheading">
          <div className="col">leave planner</div>
        </div>
        <div className="row leaveplannertogglebtn">
          <div className="col">
            <button
              onClick={() => settoggletable(true)}
              style={
                toggletable ? { background: "white" } : { background: "grey" }
              }
            >
              table-1
            </button>
            <button
              style={
                !toggletable ? { background: "white" } : { background: "grey" }
              }
              onClick={() => settoggletable(false)}
            >
              table-2
            </button>
          </div>
        </div>
        <div className="row leaveplannertable">
          <div className="col">
            {toggletable ? (
              // the below table for jan-june
              <table className="table1sthalf">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Jan</th>
                    <th>Feb</th>
                    <th>Mar</th>
                    <th>Apr</th>
                    <th>May</th>
                    <th>Jun</th>
                  </tr>
                </thead>

                <tbody>
                  {obj.map((item, index) => {
                    let leavespan = item.leaves.length;

                    let i = 0;
                    let startmonth = item.leaves[i].start.getMonth();
                    let startdate = item.leaves[i].start.getDate();

                    i < leavespan ? i++ : 0;

                    return (
                      <>
                        <tr>
                          <td>{item.name}</td>

                          {months1half.map((month, monthindex) => {
                            return (
                              <>
                                <td className="p-0 ">
                                  <table className="secondtable">
                                    <tbody>
                                      <tr>
                                        {Array.from(
                                          { length: month },
                                          (_, index2) => {
                                            let date = index2 + 1;
                                            const isHighlighted =
                                              (monthindex === startmonth &&
                                                date === startdate) ||
                                              0;

                                            let isleave = helperfunc(
                                              item.leaves,
                                              monthindex,
                                              date
                                            );

                                            return (
                                              <>
                                                {isleave ? (
                                                  <td
                                                    style={{
                                                      background: "red",
                                                    }}
                                                    onMouseOver={() =>
                                                      func1(
                                                        item.leaves,
                                                        monthindex,
                                                        date
                                                      )
                                                    }
                                                  ></td>
                                                ) : (
                                                  <td> </td>
                                                )}
                                              </>
                                            );
                                          }
                                        )}
                                      </tr>
                                    </tbody>
                                  </table>
                                </td>
                              </>
                            );
                          })}
                        </tr>
                      </>
                    );
                  })}
                </tbody>
              </table>
            ) : (
              <table className="table2sthalf">
                <thead>
                  <tr>
                    <th>Name</th>

                    <th>Jul</th>
                    <th>Aug</th>
                    <th>Sep</th>
                    <th>Oct</th>
                    <th>Nov</th>
                    <th>Dec</th>
                  </tr>
                </thead>

                <tbody>
                  {obj.map((item, index) => {
                    let leavespan = item.leaves.length;

                    let i = 0;
                    let startmonth = item.leaves[i].start.getMonth();
                    let startdate = item.leaves[i].start.getDate();

                    i < leavespan ? i++ : 0;

                    return (
                      <>
                        <tr>
                          <td>{item.name}</td>

                          {months2half.map((month, monthindex) => {
                            return (
                              <>
                                <td className="p-0">
                                  <table className="secondtable">
                                    <tbody>
                                      <tr>
                                        {Array.from(
                                          { length: month },
                                          (_, index2) => {
                                            let date = index2 + 1;
                                            const isHighlighted =
                                              (monthindex + 5 === startmonth &&
                                                date === startdate) ||
                                              0;

                                            let isleave = helperfunc(
                                              item.leaves,
                                              monthindex + 5,
                                              date
                                            );

                                            return (
                                              <>
                                                {isleave ? (
                                                  <td
                                                    style={{
                                                      background: "red",
                                                    }}
                                                    onMouseOver={() =>
                                                      func1(
                                                        item.leaves,
                                                        monthindex,
                                                        date
                                                      )
                                                    }
                                                  ></td>
                                                ) : (
                                                  <td> </td>
                                                )}
                                              </>
                                            );
                                          }
                                        )}
                                      </tr>
                                    </tbody>
                                  </table>
                                </td>
                              </>
                            );
                          })}
                        </tr>
                      </>
                    );
                  })}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}







.leaveplannercontainer{
  background: red;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;


  .leaveplanner{
      background: beige;
      height: 80%;

      .leaveplannerheading{
          text-align: center;
          font-size: 30px;
          text-transform: capitalize;
          margin: 20px;
          background: skyblue;
      }

      .leaveplannertogglebtn{
          background: cadetblue;
          button{
              background: ;
              border: none;
              border-top: 1px solid black;
              border-left:1px solid black;
              border-right: 1px solid black;
          }
      }


      .leaveplannertable{
          .table1sthalf,.table2sthalf{
              border: 1px solid red;
              width:100%;
              height: 500px;

              thead{
                  background: rgb(104, 104, 104);
                  height: 60px;
                  color: white;
                  text-align: center;
                  th{
                      border: 1px solid black;
                      font-size: 20px;
                  }
              }

              tbody{
                  td{
                      font-size: 20px;
                      text-align: center;
                      text-transform: capitalize;
                      
                     padding: 2px;
                     height: 70px;
                     width: 40px;
                     border: 1px solid black;
                     td{
                      border: none;
                     }
                  }
              }
          }
      }
  }

} 
